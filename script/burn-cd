#!/usr/bin/env bash

set -euo pipefail

# This script expects a directory name / path as a single positional
# parameter. The contents of this directory are turned into an ISO and
# then burned to a CD / DVD.

. oks-lib.sh

# commands / executables that we need
command_on_path mkisofs
command_on_path cdrecord

DIR="$1"
if [[ ! -e "$DIR" ]] || [[ ! -d "$DIR" ]]; then
    >&2 echo "ERROR: path provided is not a directory: $DIR"
    exit 1
fi

TMP_DIR=$(mktemp --directory)
trap 'rm -rf -- "$TMP_DIR"' EXIT

ISO=$TMP_DIR/temp.iso

# generate iso from directory
echo "INFO: generating iso from directory \"$DIR\""
fail_with_msg \
    "failed to create ISO from directory: $DIR" \
    mkisofs -r -iso-level 4 -o "$ISO" "$DIR" > /dev/null

if [ ! -f "$ISO" ]; then
    >&2 echo "ERROR: failed to create iso, not a file: \"$ISO\""
fi

# get hash of iso
ISO_HASH=$(sha256sum "$ISO" | awk '{print $1}')
echo "INFO: ISO has hash sha256-$ISO_HASH"

# cdrecord is noisy on both stdio and stderr. We can't redirect stderr while
# using 'fail_with_msg' so we do it manually.
echo "INFO: writing ISO to device: \"$CD_DEV\""

if ! cdrecord -silent -data "$ISO" dev="$CD_DEV" > /dev/null 2>&1; then
    >&2 echo "ERROR: failed writing ISO to \"$CD_DEV\""
    exit 1
fi

if ! eject "$CD_DEV"; then
    >&2 echo "ERROR: failed to eject \"$CD_DEV\", press the button instead?"
    exit 1
fi

# NOTE: This would be a good place to hash the cdrom to ensure the hash of
# the ISO and the CD burned match. Accessing the cdrom immediately after
# burning it fails in testing however. The alternative is to eject the CD
# immediately after it's burned, then have the user reinsert the CD to
# calculate the hash again.

exit 0
